tosca_definitions_version: cloudify_dsl_1_3

description: >
  This blueprint creates a Kubernetes Cluster in existing AWS VPC/Subnets.

imports:
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-manager/4.1/resources/rest-service/cloudify/types/types.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-aws-plugin/1.5/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-incubator/cloudify-utilities-plugin/1.2.5/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-diamond-plugin/1.3.5/plugin.yaml
  - https://raw.githubusercontent.com/cloudify-cosmo/cloudify-fabric-plugin/1.5/plugin.yaml
  - types/kubernetes-types.yaml
  - imports/kubespray.yaml
  - imports/cloud-config.yaml

inputs:

  ami:
    description: An AWS AMI. Tested with a Centos 7.0 image.
    default: ami-ae7bfdb8

  instance_type:
    description: The AWS instance_type. Tested with m3.medium, although that is unnecessarily large.
    default: t2.medium

  agent_user:
    description: The username of the agent running on the instance created from the image.
    default: centos

  k8.vpc: {}
  k8.master1.subnet: {}
  k8.master2.subnet: {}
  k8.master3.subnet: {}
  k8.nodes.subnet: {}
  k8.ssh_access_cidr: {}

dsl_definitions:

    aws_config: &aws_config
      aws_access_key_id: { get_secret: aws_access_key_id }
      aws_secret_access_key: { get_secret: aws_secret_access_key }
      ec2_region_name: { get_secret: ec2_region_name }
      ec2_region_endpoint: { get_secret: ec2_region_endpoint }

node_templates:

###############################################################################
  kubernetes_master_host1:
    type: cloudify.aws.nodes.Instance
    properties:
      name: kubernetes_master_host1
      tags:
        kubernetes.io/cluster/titan.local: owned
      agent_config:
        install_method: remote
        user: { get_input: agent_user }
        port: 22
        key: { get_secret: agent_key_private }
      aws_config: *aws_config
      image_id: { get_input: ami }
      instance_type: { get_input: instance_type }
      parameters:
        instance_profile_name: masters.netnumber.k8s.local
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
    relationships:
      - { type: cloudify.aws.relationships.instance_connected_to_subnet, target: master1.subnet }
      - { type: cloudify.aws.relationships.instance_connected_to_security_group, target: ssh_group }
      - { type: cloudify.aws.relationships.instance_connected_to_security_group, target: kubernetes_security_group }
      - { type: cloudify.relationships.depends_on, target: cloudify_host_cloud_config }

###############################################################################
  kubernetes_master_host2:
    type: cloudify.aws.nodes.Instance
    properties:
      name: kubernetes_master_host2
      tags:
        kubernetes.io/cluster/titan.local: owned
      agent_config:
        install_method: remote
        user: { get_input: agent_user }
        port: 22
        key: { get_secret: agent_key_private }
      aws_config: *aws_config
      image_id: { get_input: ami }
      instance_type: { get_input: instance_type }
      parameters:
        instance_profile_name: masters.netnumber.k8s.local
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
    relationships:
      - { type: cloudify.aws.relationships.instance_connected_to_subnet, target: master2.subnet }
      - { type: cloudify.aws.relationships.instance_connected_to_security_group, target: ssh_group }
      - { type: cloudify.aws.relationships.instance_connected_to_security_group, target: kubernetes_security_group }
      - { type: cloudify.relationships.depends_on, target: cloudify_host_cloud_config }

###############################################################################
  kubernetes_master_host3:
    type: cloudify.aws.nodes.Instance
    properties:
      name: kubernetes_master_host3
      tags:
        kubernetes.io/cluster/titan.local: owned
      agent_config:
        install_method: remote
        user: { get_input: agent_user }
        port: 22
        key: { get_secret: agent_key_private }
      aws_config: *aws_config
      image_id: { get_input: ami }
      instance_type: { get_input: instance_type }
      parameters:
        instance_profile_name: masters.netnumber.k8s.local
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
    relationships:
      - { type: cloudify.aws.relationships.instance_connected_to_subnet, target: master3.subnet }
      - { type: cloudify.aws.relationships.instance_connected_to_security_group, target: ssh_group }
      - { type: cloudify.aws.relationships.instance_connected_to_security_group, target: kubernetes_security_group }
      - { type: cloudify.relationships.depends_on, target: cloudify_host_cloud_config }

###############################################################################
  kubernetes_node_host:
    type: cloudify.aws.nodes.Instance
    capabilities:
      scalable:
        properties:
          default_instances: 1
    properties:
      name: kubernetes_node_host
      tags:
        kubernetes.io/cluster/titan.local: owned
      agent_config:
        install_method: remote
        user: { get_input: agent_user }
        port: 22
        key: { get_secret: agent_key_private }
      aws_config: *aws_config
      image_id: { get_input: ami }
      instance_type: { get_input: instance_type }
      parameters:
        instance_profile_name: nodes.netnumber.k8s.local
    interfaces:
      cloudify.interfaces.lifecycle:
        create:
          implementation: aws.cloudify_aws.ec2.instance.create
          inputs:
            args:
              user_data: { get_attribute: [ cloudify_host_cloud_config, cloud_config ] }
      cloudify.interfaces.monitoring_agent:
        install:
          implementation: diamond.diamond_agent.tasks.install
          inputs:
            diamond_config:
              interval: 1
        start: diamond.diamond_agent.tasks.start
        stop: diamond.diamond_agent.tasks.stop
        uninstall: diamond.diamond_agent.tasks.uninstall
      cloudify.interfaces.monitoring:
        start:
          implementation: diamond.diamond_agent.tasks.add_collectors
          inputs:
            collectors_config:
              ProcessResourcesCollector:
                config:
                  enabled: true
                  unit: B
                  measure_collector_time: true
                  cpu_interval: 0.5
                  process:
                    hyperkube:
                      name: hyperkube
    relationships:
      - { type: cloudify.aws.relationships.instance_connected_to_subnet, target: nodes.subnet }
      - { type: cloudify.aws.relationships.instance_connected_to_security_group, target: ssh_group }
      - { type: cloudify.aws.relationships.instance_connected_to_security_group, target: kubernetes_security_group }
      - { type: cloudify.relationships.depends_on, target: cloudify_host_cloud_config }

  kubernetes.cluster:
    type: cloudify.nodes.SoftwareComponent
    interfaces:
      cloudify.interfaces.lifecycle:
        start: scripts/cluster_config.py
    relationships:
      - { type: cloudify.relationships.depends_on,   target: kubernetes }
      - { type: cloudify.relationships.contained_in, target: kubernetes_master_host1 }

  kubernetes_security_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      tags:
        kubernetes.io/cluster/titan.local: owned
      aws_config: *aws_config
      description: Security group for Kubernetes Cluster
      rules:
        - { ip_protocol: tcp, from_port: 1, to_port: 64000, cidr_ip: 10.0.0.0/8 }
        - { ip_protocol: tcp, from_port: 53, to_port: 53, cidr_ip: { get_input: k8.ssh_access_cidr } }
        - { ip_protocol: udp, from_port: 53, to_port: 53, cidr_ip: { get_input: k8.ssh_access_cidr } }
        - { ip_protocol: tcp, from_port: 80, to_port: 80, cidr_ip: { get_input: k8.ssh_access_cidr } }
        - { ip_protocol: tcp, from_port: 443, to_port: 443, cidr_ip: { get_input: k8.ssh_access_cidr } }
        - { ip_protocol: tcp, from_port: 2379, to_port: 2379, cidr_ip: { get_input: k8.ssh_access_cidr } }
        - { ip_protocol: tcp, from_port: 4001, to_port: 4001, cidr_ip: { get_input: k8.ssh_access_cidr } }
        - { ip_protocol: tcp, from_port: 4789, to_port: 4789, cidr_ip: { get_input: k8.ssh_access_cidr } }
        - { ip_protocol: tcp, from_port: 6443, to_port: 6443, cidr_ip: { get_input: k8.ssh_access_cidr } }
        - { ip_protocol: udp, from_port: 6443, to_port: 6443, cidr_ip: { get_input: k8.ssh_access_cidr } }
        - { ip_protocol: tcp, from_port: 6783, to_port: 6784, cidr_ip: { get_input: k8.ssh_access_cidr } }
        - { ip_protocol: udp, from_port: 6783, to_port: 6784, cidr_ip: { get_input: k8.ssh_access_cidr } }
        - { ip_protocol: tcp, from_port: 8080, to_port: 8080, cidr_ip: { get_input: k8.ssh_access_cidr } }
        - { ip_protocol: tcp, from_port: 9090, to_port: 9090, cidr_ip: { get_input: k8.ssh_access_cidr } }
        - { ip_protocol: tcp, from_port: 10250, to_port: 10250, cidr_ip: { get_input: k8.ssh_access_cidr } }
    relationships:
      - { type: cloudify.aws.relationships.security_group_contained_in_vpc, target: vpc }

  ssh_group:
    type: cloudify.aws.nodes.SecurityGroup
    properties:
      aws_config: *aws_config
      description: SSH Group
      rules:
        - { ip_protocol: tcp, from_port: 22, to_port: 22, cidr_ip: { get_input: k8.ssh_access_cidr } }
    relationships:
      - { type: cloudify.aws.relationships.security_group_contained_in_vpc, target: vpc }

###########################################################
  master1.subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: k8.master1.subnet }
      cidr_block: N/A
      availability_zone: N/A
    relationships:
      - { type: cloudify.aws.relationships.subnet_contained_in_vpc, target: vpc }

###########################################################
  master2.subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: k8.master2.subnet }
      cidr_block: N/A
      availability_zone: N/A
    relationships:
      - { type: cloudify.aws.relationships.subnet_contained_in_vpc, target: vpc }

###########################################################
  master3.subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: k8.master3.subnet }
      cidr_block: N/A
      availability_zone: N/A
    relationships:
      - { type: cloudify.aws.relationships.subnet_contained_in_vpc, target: vpc }
###########################################################
  nodes.subnet:
    type: cloudify.aws.nodes.Subnet
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: k8.nodes.subnet }
      cidr_block: N/A
      availability_zone: N/A
    relationships:
      - { type: cloudify.aws.relationships.subnet_contained_in_vpc, target: vpc }

  vpc:
    type: cloudify.aws.nodes.VPC
    properties:
      aws_config: *aws_config
      use_external_resource: true
      resource_id: { get_input: k8.vpc}
      cidr_block: N/A

groups:

  k8s_node_group:
    members:
      - kubernetes_node_host

outputs:
  kubernetes_master_public_ip:
    value:
      - { get_attribute: [ kubernetes_master_host1, public_ip_address ] }
      - { get_attribute: [ kubernetes_master_host2, public_ip_address ] }
      - { get_attribute: [ kubernetes_master_host3, public_ip_address ] }
  kubernetes_master_private_ip:
    value:
      - { get_attribute: [ kubernetes_master_host1, ip ] }
      - { get_attribute: [ kubernetes_master_host2, ip ] }
      - { get_attribute: [ kubernetes_master_host3, ip ] }
  kubernetes.cluster:
    value:
      ui: { concat: ['https://', { get_attribute: [ kubernetes_master_host1, public_ip_address ] }, ':6443/ui/' ] }
      users: { get_attribute: [ kubernetes.cluster, users ] }
